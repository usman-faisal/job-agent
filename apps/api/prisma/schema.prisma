// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  assistant
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  role      Role
}

model Resume {
  id              String          @id @default(uuid())
  resumeIdentifier String            @unique
  profile         Profile?
  educations       Education[]
  experiences     Experience[]
  skills          Skill[]
  projects        Project[]
  languages       Language[]
  certifications  Certification[]
  publications    Publication[]
  active          Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Profile {
  id             String   @id @default(uuid())
  resumeId       String   @unique
  resume         Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name           String
  email          String
  phone          String?
  address        String?
  linkedin       String?
  github         String?
  website        String?
  summary        String?
  role           String?
}

model Education {
  id             String   @id @default(uuid())
  resumeId       String
  resume         Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  institution    String
  degree         String
  fieldOfStudy   String
  startDate      DateTime?
  endDate        DateTime?
  description    String?
  score          Float?
}

model Experience {
  id             String   @id @default(uuid())
  resumeId       String
  resume         Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  role           String
  company        String
  location       String
  startDate      DateTime?
  endDate        DateTime?
  description    String?
}

model Project {
  id                  String   @id @default(uuid())
  resumeId            String
  resume              Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  projectName         String
  deploymentLink      String?
  repoLink            String?
  projectDescription  String?
}

model Skill {
  id              String   @id @default(uuid())
  resumeId        String
  resume          Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  skillCategories String
  skillList       String
}

model Language {
  id             String   @id @default(uuid())
  resumeId       String
  resume         Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  languageName   String
  proficiency    String?
}

model Certification {
  id                     String    @id @default(uuid())
  resumeId               String
  resume                 Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  certificationName      String
  certificationAuthority String
  certificationProof     String?
  date                   DateTime?
  description            String?
}

model Publication {
  id                      String    @id @default(uuid())
  resumeId                String
  resume                  Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  publicationName         String
  publicationLink         String?
  publicationPublisher    String?
  publicationDate         DateTime?
  publicationDescription  String?
}